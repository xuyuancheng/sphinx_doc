.. highlightlang:: c
.. Embedding Python documentation master file, created by
   sphinx-quickstart on Fri Nov 30 13:44:07 2012.

============================================================
Embedding Python
============================================================

------------------------------------------------------------
High Level
------------------------------------------------------------
This high level interface is intended to execute a Python script without needing to interact with the application directly. ::

    #include <Python.h> //in python root dirctory, include folder

    int main( int argc, char *argv[] )
    {
        Python_SetProgramName(argv[0]);
        Py_Initialize();  //initialize the interpreter
        PyRun_SimleString("import os\n"
                          "print os.getcwd()\n"); // can also run a file using PyRun_SimpleFile
        Py_Finalize();
        return 0 ;
    }

Notice that you should link the pythonxy.lib or pythonxy.a.

--------------------------------------------------------------------
Low level
--------------------------------------------------------------------
1. Convert data values from C to Python
2. Perform a function call to a Python interface routine using the converted value
3. Convert the data values from the call Python to C.

Below is a demo from python27 doc. It aims to execute a function in a python script *(don't name the python script as 'test.py')* ::

    #include <Python.h>

    int
    main(int argc, char *argv[])
    {
        PyObject *pName, *pModule, *pDict, *pFunc;
        PyObject *pArgs, *pValue;
        int i;

        if (argc < 3) {
            fprintf(stderr,"Usage: call pythonfile funcname [args]\n");
            return 1;
        }

        Py_Initialize();
        pName = PyString_FromString(argv[1]);
        /* Error checking of pName left out */

        pModule = PyImport_Import(pName);
        Py_DECREF(pName);

        if (pModule != NULL) {
            pFunc = PyObject_GetAttrString(pModule, argv[2]);
            /* pFunc is a new reference */

            if (pFunc && PyCallable_Check(pFunc)) {
                pArgs = PyTuple_New(argc - 3);
                for (i = 0; i < argc - 3; ++i) {
                    pValue = PyInt_FromLong(atoi(argv[i + 3]));
                    if (!pValue) {
                        Py_DECREF(pArgs);
                        Py_DECREF(pModule);
                        fprintf(stderr, "Cannot convert argument\n");
                        return 1;
                    }
                    /* pValue reference stolen here: */
                    PyTuple_SetItem(pArgs, i, pValue);
                }
                pValue = PyObject_CallObject(pFunc, pArgs);
                Py_DECREF(pArgs);
                if (pValue != NULL) {
                    printf("Result of call: %ld\n", PyInt_AsLong(pValue));
                    Py_DECREF(pValue);
                }
                else {
                    Py_DECREF(pFunc);
                    Py_DECREF(pModule);
                    PyErr_Print();
                    fprintf(stderr,"Call failed\n");
                    return 1;
                }
            }
            else {
                if (PyErr_Occurred())
                    PyErr_Print();
                fprintf(stderr, "Cannot find function \"%s\"\n", argv[2]);
            }
            Py_XDECREF(pFunc);
            Py_DECREF(pModule);
        }
        else {
            PyErr_Print();
            fprintf(stderr, "Failed to load \"%s\"\n", argv[1]);
            return 1;
        }
        Py_Finalize();
        return 0;
    }
    
- Exchanging the data values is quite cumbersome.
- You should take care of the references counting and exceptions by yourself.

-----------------------------------------------------------------------------
Extending Embedded Python
-----------------------------------------------------------------------------
- Extending embedded interpreter enable you to use the function defined in c/c++ appliction
- These methods will expose an API of the application to Python

-------------------------------------------------------------
Embedding the interpreter in your APP
-------------------------------------------------------------
You still can't execute your app without the Python env.
You should put these things to your app folder list blow.

- pythonxy.dll *(Compile the python source code to get it)*
- pythonxy\\DLLS
- pythonxy\\lib

Then set the python path before :c:func:`Py_initialize()` ::

    #include "stdafx.h"
    #include <iostream>
    #include "Python.h"

    using namespace std;

    int _tmain(int argc, _TCHAR* argv[])
    {
       char pySearchPath[] = "Python26";
       Py_SetPythonHome(pySearchPath);
       Py_Initialize();
       PyRun_SimpleString("from time import time,ctime\n"
                         "print 'Today is',ctime(time())\n");
       //cerr << Py_GetPath() << endl;
       Py_Finalize();

        return 0;
    }

You can remove the unnecessary files but you must clear about it.
